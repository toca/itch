var passed: int = 0;
var failed: int = 0;
var buffer: string;

func main(): void {   
    // exec
    var exec_res = exec("echo bar | echo foo");
    assert_str("foo", exec_res,"exec echo");
    var exec_res2 = exec("echo bar 'echo foo'");
    assert_str("bar 'echo foo'", exec_res2, "exec echo");
    // execq
    var execq_res1 = execq("echo 'bar'", "'");
    if (execq_res1=="\"bar\"") {
        cprint("OK: execq double quote", ICH_GREEN);
        passed++;
    } else {
        cprint("NG: execq double quote", ICH_RED);
        failed++;
    }

    // thru
    var thru_res = thru("where curl > nul");
    assert(0, thru_res, "where curl");
    var thru_res2 = thru("where edlin 2> nul");
    assert(1, thru_res2, "where edlin");
    var thru_res3 = thru("echo 'bar'>nul | echo foo> nul");
    assert(0, thru_res3, "echo | echo");
    // thruq
    var thruq_res = thruq("echo 'OK'", "'");

    // system
    system("date /T", print);
    // systemq
    systemq("echo ?OK?", "?", print);
    systemq("echo 'foo'", "'", print);

    // read_file
    `echo test_ok> buildin_test.tmp`;
    buffer="";
    read_file("buildin_test.tmp", func(line: string): void {
        buffer=line;
    });
    assert_str("test_ok", buffer, "read_file");
    `del buildin_test.tmp`;
    
    var replaced1 = str_replace("foobarbuz", "o", "0");
    assert_str("f00barbuz", replaced1, "replace1");
    var replaced2 = str_replace("aaa > bbb", ">", "GT");
    assert_str("aaa GT bbb", replaced2, "replace2");
    var replaced3 = str_replace_ex("*abc*", "*", "_");
    assert_str("_abc_", replaced3, "replace3");
    var replaced4 = str_replace_ex("_a_b_c_", "_", " ");
    assert_str(" a b c ", replaced4, "replace4");
    var no_replaced = str_replace_ex("abc", "X", "x");
    assert_str("abc", no_replaced, "no replaced");


    var subst1 = substr("abcde", 1, 3);
    assert_str("bcd", subst1, "substring");

    var cut = str_cut("abcdefg", 5);
    assert_str("fg", cut, "str_cut");

    var len1 = str_len("abcdefg");
    assert(7, len1, "str_len 7");
    var len2 = str_len("");
    assert(0, len2, "str_len 0");

    var s = "abc";
    var empty1 = str_empty(s);
    assert_bool(false, empty1, "not empty");
    s = "";
    var empty2 = str_empty(s);
    assert_bool(true, empty2, "str empty");

    var equals1 = str_equals("ABC", "abc");
    assert_bool(true, equals1, "ABC == abc");
    var equals2 = str_equals("abc", "def");
    assert_bool(false, equals2, "abc == def");
    var equals3 = str_equals("012", "012");
    assert_bool(true, equals3, "012 == 012");
    var equals4 = str_equals("42", "042");
    assert_bool(false, equals4, "42 == 042");






    // result
    print("--------------------------------------------------------------");
    if (0 < failed) {
        cprint("failed: [%failed%] cases       (buildin.ich)", ICH_RED);
    }
    if (0 < passed) {
        cprint("passed: [%passed%] cases       (buildin.ich)", ICH_GREEN);
    }

}

func assert(x: int, y: int, msg: string): void {
    if (x == y) {
        cprint("OK: %%msg%%", ICH_GREEN);
        passed++;
    } else {
        cprint("NG: %%msg%% expect-> %x%  actual-> %y%", ICH_RED);
        failed++;
    }
}

func assert_str(x: string, y: string, msg: string): void {
    if (x == y) {
        cprint("OK: %%msg%%", ICH_GREEN);
        passed++;
    } else {
        cprint("NG: %%msg%% expect-> '%x%',  actual-> '%y%'", ICH_RED);
        failed++;
    }
}

func assert_bool(x: bool, y: bool, msg: string): void {
    if (x == y) {
        cprint("OK: %%msg%%", ICH_GREEN);
        passed++;
    } else {
        cprint("NG: %%msg%% expect-> %x%  actual-> %y%", ICH_RED);
        failed++;
    }
}
